{
  
    
        "post0": {
            "title": "Title",
            "content": ". import pandas as pd from pandas.tseries.holiday import USFederalHolidayCalendar as calendar import warnings warnings.filterwarnings(&#39;ignore&#39;) import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import numpy as np import statsmodels.api as sm import math import numpy as np import pandas as pd from datetime import date, timedelta, datetime from pandas.plotting import register_matplotlib_converters # This function adds plotting functions for calender dates import matplotlib.pyplot as plt import matplotlib.dates as mdates from sklearn.metrics import mean_absolute_error, mean_squared_error from keras.models import Sequential from keras.layers import LSTM, Dense, Dropout from keras.callbacks import EarlyStopping from sklearn.preprocessing import RobustScaler, MinMaxScaler import seaborn as sns . weather = pd.read_csv(&#39;/content/drive/MyDrive/AMTLF/weather.csv&#39;) pjm = pd.read_csv(&#39;/content/drive/MyDrive/AMTLF/pjm.csv&#39;) . weather.head() . DATA_DATE_and_HOUR TEMPERATURE WIND_SPEED_MPH WIND_GUST_MPH RELATIVE_HUMIDITY CLOUD_COVER PRECIPITATION . 0 01/Jan/2015 01 | 17.0 | 12.0 | 12.0 | 49.0 | 19.0 | 0.0 | . 1 01/Jan/2015 02 | 17.0 | 12.0 | 12.0 | 49.0 | 10.0 | 0.0 | . 2 01/Jan/2015 03 | 17.0 | 14.0 | 14.0 | 51.0 | 0.0 | 0.0 | . 3 01/Jan/2015 04 | 16.0 | 12.0 | 12.0 | 54.0 | 0.0 | 0.0 | . 4 01/Jan/2015 05 | 15.0 | 7.0 | 7.0 | 56.0 | 0.0 | 0.0 | . pjm.head() . datetime_beginning_utc datetime_beginning_ept nerc_region mkt_region zone load_area mw is_verified . 0 2017-01-01T20:00:00.000Z | 2017-01-01T15:00:00.000Z | RFC | MIDATL | PL | PLCO | 4039.059 | True | . 1 2017-01-01T22:00:00.000Z | 2017-01-01T17:00:00.000Z | RFC | MIDATL | PL | PLCO | 4658.056 | True | . 2 2017-01-02T08:00:00.000Z | 2017-01-02T03:00:00.000Z | RFC | MIDATL | PL | PLCO | 3854.594 | True | . 3 2017-01-02T11:00:00.000Z | 2017-01-02T06:00:00.000Z | RFC | MIDATL | PL | PLCO | 4269.468 | True | . 4 2017-01-02T13:00:00.000Z | 2017-01-02T08:00:00.000Z | RFC | MIDATL | PL | PLCO | 4746.482 | True | . weather = weather.rename(columns={ weather.columns[0]: &quot;datetime&quot; }) weather.datetime = pd.to_datetime(weather[&#39;datetime&#39;]) weather[&#39;time&#39;],weather[&#39;date&#39;]= weather[&#39;datetime&#39;].apply(lambda x:x.time()), weather[&#39;datetime&#39;].apply(lambda x:x.date()) weather1 = weather.groupby(&#39;date&#39;).agg({&#39;TEMPERATURE&#39;: [&#39;mean&#39;, &#39;min&#39;, &#39;max&#39;], &#39;RELATIVE_HUMIDITY&#39;: [&#39;mean&#39;], &#39;WIND_GUST_MPH&#39;: [&#39;mean&#39;], &#39;CLOUD_COVER&#39;: [&#39;mean&#39;], &#39;PRECIPITATION&#39;: [&#39;mean&#39;]}) #convert back to usable dataframe weather1.columns = [&#39;_&#39;.join(col) for col in weather1.columns] weather1 = weather1.reset_index() weather1.date = pd.to_datetime(weather1[&#39;date&#39;]) . weather1[&#39;weekday&#39;] =weather1[&#39;date&#39;].dt.dayofweek weather1[&#39;month&#39;] = weather1[&#39;date&#39;].dt.month cal = calendar() holidays = cal.holidays(start=weather1.date.min(), end=weather1.date.max()) weather1[&#39;holiday&#39;] = weather1[&#39;date&#39;].isin(holidays).astype(int) . pjm = pjm.rename(columns={ pjm.columns[1]: &quot;datetime&quot; }) pjm.datetime = pd.to_datetime(pjm[&#39;datetime&#39;]) pjm[&#39;time&#39;],pjm[&#39;date&#39;]= pjm[&#39;datetime&#39;].apply(lambda x:x.time()), pjm[&#39;datetime&#39;].apply(lambda x:x.date()) pjm1 = pjm.groupby(&#39;date&#39;).agg({&#39;mw&#39;: [&#39;max&#39;]}) pjm1.columns = [&#39;_&#39;.join(col) for col in pjm1.columns] pjm1 = pjm1.reset_index() pjm1.date = pd.to_datetime(pjm1[&#39;date&#39;]) . weather1.head() . date TEMPERATURE_mean TEMPERATURE_min TEMPERATURE_max RELATIVE_HUMIDITY_mean WIND_GUST_MPH_mean CLOUD_COVER_mean PRECIPITATION_mean weekday month holiday . 0 2015-01-01 | 28.878261 | 14.0 | 42.0 | 54.343478 | 11.800000 | 5.686957 | 0.0000 | 3 | 1 | 1 | . 1 2015-01-02 | 31.508333 | 19.0 | 43.0 | 61.887500 | 6.787500 | 32.333333 | 0.0000 | 4 | 1 | 0 | . 2 2015-01-03 | 29.845833 | 18.0 | 40.0 | 80.008333 | 5.262500 | 77.025000 | 47.8500 | 5 | 1 | 0 | . 3 2015-01-04 | 40.725000 | 34.0 | 58.0 | 78.987500 | 9.333333 | 94.629167 | 30.1125 | 6 | 1 | 0 | . 4 2015-01-05 | 29.687500 | 10.0 | 45.0 | 56.333333 | 27.516667 | 46.662500 | 0.4125 | 0 | 1 | 0 | . #we have some missing dates from both datasets - I would probably tackle this by imputing values, but for time we&#39;ll just leave it out print(pjm1.date.max()) print(weather1.date.min()) print(pd.date_range(start = weather1.date.min(), end = weather1.date.max() ).difference(weather1.date)) print(pd.date_range(start = weather1.date.min(), end = weather1.date.max() ).difference(pjm1.date)) . 2019-12-31 00:00:00 2015-01-01 00:00:00 DatetimeIndex([], dtype=&#39;datetime64[ns]&#39;, freq=None) DatetimeIndex([], dtype=&#39;datetime64[ns]&#39;, freq=None) . df = pd.merge(weather1, pjm1, on=&#39;date&#39;, how=&#39;outer&#39;) df = df.dropna() df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;]) df = df.set_index(&#39;date&#39;) . df.head() . TEMPERATURE_mean TEMPERATURE_min TEMPERATURE_max RELATIVE_HUMIDITY_mean WIND_GUST_MPH_mean CLOUD_COVER_mean PRECIPITATION_mean weekday month holiday mw_max . date . 2015-01-01 28.878261 | 14.0 | 42.0 | 54.343478 | 11.800000 | 5.686957 | 0.0000 | 3.0 | 1.0 | 1.0 | 5214.883 | . 2015-01-02 31.508333 | 19.0 | 43.0 | 61.887500 | 6.787500 | 32.333333 | 0.0000 | 4.0 | 1.0 | 0.0 | 5464.446 | . 2015-01-03 29.845833 | 18.0 | 40.0 | 80.008333 | 5.262500 | 77.025000 | 47.8500 | 5.0 | 1.0 | 0.0 | 5572.899 | . 2015-01-04 40.725000 | 34.0 | 58.0 | 78.987500 | 9.333333 | 94.629167 | 30.1125 | 6.0 | 1.0 | 0.0 | 4985.939 | . 2015-01-05 29.687500 | 10.0 | 45.0 | 56.333333 | 27.516667 | 46.662500 | 0.4125 | 0.0 | 1.0 | 0.0 | 6336.146 | . df_plot = df.copy() list_length = df_plot.shape[1] ncols = 2 nrows = int(round(list_length / ncols, 0)) fig, ax = plt.subplots(nrows=nrows, ncols=ncols, sharex=True, figsize=(14, 7)) fig.subplots_adjust(hspace=0.5, wspace=0.5) for i in range(0, list_length): ax = plt.subplot(nrows,ncols,i+1) sns.lineplot(data = df_plot.iloc[:, i], ax=ax) ax.set_title(df_plot.columns[i]) ax.tick_params(axis=&quot;x&quot;, rotation=30, labelsize=10, length=0) ax.xaxis.set_major_locator(mdates.AutoDateLocator()) fig.tight_layout() plt.show() . train_df = df.sort_values(by=[&#39;date&#39;]).copy() # We safe a copy of the dates index, before we need to reset it to numbers date_index = train_df.index # Adding Month and Year in separate columns # d = pd.to_datetime(train_df.index) # train_df[&#39;Month&#39;] = d.strftime(&quot;%m&quot;) # train_df[&#39;Year&#39;] = d.strftime(&quot;%Y&quot;) # We reset the index, so we can convert the date-index to a number-index train_df = train_df.reset_index(drop=True).copy() train_df.head(5) . TEMPERATURE_mean TEMPERATURE_min TEMPERATURE_max RELATIVE_HUMIDITY_mean WIND_GUST_MPH_mean CLOUD_COVER_mean PRECIPITATION_mean weekday month holiday mw_max . 0 28.878261 | 14.0 | 42.0 | 54.343478 | 11.800000 | 5.686957 | 0.0000 | 3.0 | 1.0 | 1.0 | 5214.883 | . 1 31.508333 | 19.0 | 43.0 | 61.887500 | 6.787500 | 32.333333 | 0.0000 | 4.0 | 1.0 | 0.0 | 5464.446 | . 2 29.845833 | 18.0 | 40.0 | 80.008333 | 5.262500 | 77.025000 | 47.8500 | 5.0 | 1.0 | 0.0 | 5572.899 | . 3 40.725000 | 34.0 | 58.0 | 78.987500 | 9.333333 | 94.629167 | 30.1125 | 6.0 | 1.0 | 0.0 | 4985.939 | . 4 29.687500 | 10.0 | 45.0 | 56.333333 | 27.516667 | 46.662500 | 0.4125 | 0.0 | 1.0 | 0.0 | 6336.146 | . FEATURES = [&#39;TEMPERATURE_mean&#39;, &#39;TEMPERATURE_min&#39;, &#39;TEMPERATURE_max&#39;, &#39;RELATIVE_HUMIDITY_mean&#39;, &#39;WIND_GUST_MPH_mean&#39; , &#39;CLOUD_COVER_mean&#39;, &#39;PRECIPITATION_mean&#39;, &#39;month&#39;, &#39;weekday&#39;, &#39;holiday&#39;, &#39;mw_max&#39; ] print(&#39;FEATURE LIST&#39;) print([f for f in FEATURES]) # Create the dataset with features and filter the data to the list of FEATURES data = pd.DataFrame(train_df) data_filtered = data[FEATURES] # We add a prediction column and set dummy values to prepare the data for scaling data_filtered_ext = data_filtered.copy() data_filtered_ext[&#39;Prediction&#39;] = data_filtered_ext[&#39;mw_max&#39;] # Print the tail of the dataframe data_filtered_ext.tail() . FEATURE LIST [&#39;TEMPERATURE_mean&#39;, &#39;TEMPERATURE_min&#39;, &#39;TEMPERATURE_max&#39;, &#39;RELATIVE_HUMIDITY_mean&#39;, &#39;WIND_GUST_MPH_mean&#39;, &#39;CLOUD_COVER_mean&#39;, &#39;PRECIPITATION_mean&#39;, &#39;month&#39;, &#39;weekday&#39;, &#39;holiday&#39;, &#39;mw_max&#39;] . TEMPERATURE_mean TEMPERATURE_min TEMPERATURE_max RELATIVE_HUMIDITY_mean WIND_GUST_MPH_mean CLOUD_COVER_mean PRECIPITATION_mean month weekday holiday mw_max Prediction . 1457 45.680556 | 32.0 | 57.0 | 93.208333 | 8.597222 | 98.750000 | 49.041667 | 12.0 | 4.0 | 0.0 | 5085.966 | 5085.966 | . 1458 42.537037 | 29.0 | 52.0 | 72.782407 | 15.175926 | 71.430556 | 0.458333 | 12.0 | 5.0 | 0.0 | 4864.620 | 4864.620 | . 1459 35.453704 | 24.0 | 45.0 | 73.740741 | 5.263889 | 68.263889 | 1.833333 | 12.0 | 6.0 | 0.0 | 4948.338 | 4948.338 | . 1460 35.449074 | 25.0 | 46.0 | 90.828704 | 6.592593 | 64.958333 | 44.000000 | 12.0 | 0.0 | 0.0 | 5217.259 | 5217.259 | . 1461 46.388889 | 31.0 | 57.0 | 73.259259 | 17.958333 | 85.134259 | 3.666667 | 1.0 | 1.0 | 1.0 | 4569.365 | 4569.365 | . nrows = data_filtered.shape[0] # Convert the data to numpy values np_data_unscaled = np.array(data_filtered) np_data = np.reshape(np_data_unscaled, (nrows, -1)) print(np_data.shape) # Transform the data by scaling each feature to a range between 0 and 1 scaler = MinMaxScaler() np_data_scaled = scaler.fit_transform(np_data_unscaled) # Creating a separate scaler that works on a single column for scaling predictions scaler_pred = MinMaxScaler() df_mw = pd.DataFrame(data_filtered_ext[&#39;mw_max&#39;]) np_mw_scaled = scaler_pred.fit_transform(df_mw) . (1462, 11) . sequence_length = 11 # Prediction Index index_Close = data.columns.get_loc(&quot;mw_max&quot;) # Split the training data into train and train data sets # As a first step, we get the number of rows to train the model on 80% of the data train_data_len = math.ceil(np_data_scaled.shape[0] * 0.8) # Create the training and test data train_data = np_data_scaled[0:train_data_len, :] test_data = np_data_scaled[train_data_len - sequence_length:, :] # The RNN needs data with the format of [samples, time steps, features] # Here, we create N samples, sequence_length time steps per sample, and 6 features def partition_dataset(sequence_length, data): x, y = [], [] data_len = data.shape[0] for i in range(sequence_length, data_len): x.append(data[i-sequence_length:i,:]) #contains sequence_length values 0-sequence_length * columsn y.append(data[i, index_Close]) #contains the prediction values for validation, for single-step prediction # Convert the x and y to numpy arrays x = np.array(x) y = np.array(y) return x, y # Generate training data and test data x_train, y_train = partition_dataset(sequence_length, train_data) x_test, y_test = partition_dataset(sequence_length, test_data) # Print the shapes: the result is: (rows, training_sequence, features) (prediction value, ) print(x_train.shape, y_train.shape) print(x_test.shape, y_test.shape) # Validate that the prediction value and the input match up # The last close price of the second input sample should equal the first prediction value print(x_train[1][sequence_length-1][index_Close]) print(y_train[0]) . (1159, 11, 11) (1159,) (292, 11, 11) (292,) 0.6460628010816851 0.6460628010816851 . model = Sequential() # Model with n_neurons = inputshape Timestamps, each with x_train.shape[2] variables n_neurons = x_train.shape[1] * x_train.shape[2] print(n_neurons, x_train.shape[1], x_train.shape[2]) model.add(LSTM(n_neurons, return_sequences=True, input_shape=(x_train.shape[1], x_train.shape[2]))) model.add(LSTM(n_neurons, return_sequences=False)) model.add(Dense(5)) model.add(Dense(1)) # Compile the model model.compile(optimizer=&#39;adam&#39;, loss=&#39;mse&#39;) . 121 11 11 . epochs = 15 batch_size = 7 early_stop = EarlyStopping(monitor=&#39;loss&#39;, patience=5, verbose=1) history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test) ) #callbacks=[early_stop]) . Epoch 1/15 166/166 [==============================] - 9s 28ms/step - loss: 0.0273 - val_loss: 0.0191 Epoch 2/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0162 - val_loss: 0.0180 Epoch 3/15 166/166 [==============================] - 4s 23ms/step - loss: 0.0132 - val_loss: 0.0116 Epoch 4/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0111 - val_loss: 0.0106 Epoch 5/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0097 - val_loss: 0.0095 Epoch 6/15 166/166 [==============================] - 4s 23ms/step - loss: 0.0089 - val_loss: 0.0084 Epoch 7/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0083 - val_loss: 0.0102 Epoch 8/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0074 - val_loss: 0.0101 Epoch 9/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0073 - val_loss: 0.0092 Epoch 10/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0066 - val_loss: 0.0065 Epoch 11/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0066 - val_loss: 0.0065 Epoch 12/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0069 - val_loss: 0.0073 Epoch 13/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0066 - val_loss: 0.0075 Epoch 14/15 166/166 [==============================] - 4s 22ms/step - loss: 0.0061 - val_loss: 0.0062 Epoch 15/15 166/166 [==============================] - 4s 23ms/step - loss: 0.0063 - val_loss: 0.0064 . fig, ax = plt.subplots(figsize=(20, 10), sharex=True) plt.plot(history.history[&quot;loss&quot;]) plt.title(&quot;Model loss&quot;) plt.ylabel(&quot;Loss&quot;) plt.xlabel(&quot;Epoch&quot;) ax.xaxis.set_major_locator(plt.MaxNLocator(epochs)) plt.legend([&quot;Train&quot;, &quot;Test&quot;], loc=&quot;upper left&quot;) plt.grid() plt.show() . y_pred_scaled = model.predict(x_test) # Unscale the predicted values y_pred = scaler_pred.inverse_transform(y_pred_scaled) y_test_unscaled = scaler_pred.inverse_transform(y_test.reshape(-1, 1)) # Mean Absolute Error (MAE) MAE = mean_absolute_error(y_test_unscaled, y_pred) print(f&#39;Median Absolute Error (MAE): {np.round(MAE, 2)}&#39;) # Mean Absolute Percentage Error (MAPE) MAPE = np.mean((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled))) * 100 print(f&#39;Mean Absolute Percentage Error (MAPE): {np.round(MAPE, 2)} %&#39;) # Median Absolute Percentage Error (MDAPE) MDAPE = np.median((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled)) ) * 100 print(f&#39;Median Absolute Percentage Error (MDAPE): {np.round(MDAPE, 2)} %&#39;) . Median Absolute Error (MAE): 290.29 Mean Absolute Percentage Error (MAPE): 5.68 % Median Absolute Percentage Error (MDAPE): 4.03 % . y_test_unscaled_df . 0 . 0 5588.136 | . 1 5167.406 | . 2 4727.129 | . 3 5542.700 | . 4 5686.708 | . ... ... | . 287 5085.966 | . 288 4864.620 | . 289 4948.338 | . 290 5217.259 | . 291 4569.365 | . 292 rows × 1 columns . #mergedDf = mergedDf.rename(columns={&#39;0_x&#39;:&#39;test&#39;, # &#39;0_y&#39;:&#39;pred&#39; # }) #mergedDf . test pred . 0 5588.136 | 5752.901367 | . 1 5167.406 | 5319.404297 | . 2 4727.129 | 5068.098633 | . 3 5542.700 | 5390.820801 | . 4 5686.708 | 5451.287598 | . ... ... | ... | . 287 5085.966 | 5528.766113 | . 288 4864.620 | 4681.929688 | . 289 4948.338 | 4730.314941 | . 290 5217.259 | 5364.669434 | . 291 4569.365 | 5221.439453 | . 292 rows × 2 columns . y_test_unscaled_df = pd.DataFrame(y_test_unscaled[:,0]) y_y_pred_df = pd.DataFrame(y_pred[:,0]) joinedlist = np.concatenate((y_test_unscaled, y_pred), axis=1) joinedlist . array([[5588.136 , 5752.90136719], [5167.406 , 5319.40429688], [4727.129 , 5068.09863281], [5542.7 , 5390.82080078], [5686.708 , 5451.28759766], [5791.296 , 5552.93505859], [5595.647 , 5737.56054688], [5526.587 , 5648.12158203], [4906.72 , 5220.13867188], [4917.663 , 4980.33398438], [5717.83 , 5585.10595703], [5573.294 , 5700.89111328], [5325.384 , 5513.05419922], [4921.831 , 5320.06982422], [4388.778 , 4900.68408203], [4420.854 , 4219.89257812], [4076.96 , 4602.07324219], [5104.27 , 4943.01660156], [5319.024 , 5101.00683594], [5115.679 , 5346.75146484], [5541.523 , 5332.18310547], [5446.056 , 5506.91943359], [4753.021 , 4874.27392578], [4851.931 , 4728.62988281], [5547.034 , 5566.66162109], [5347.981 , 5411.53808594], [5529.261 , 5350.67236328], [5011.807 , 5428.98876953], [4404.787 , 4863.11279297], [4002.722 , 4157.70166016], [4595.129 , 4176.10205078], [5112.376 , 5103.51025391], [5186.39 , 5000.93066406], [5291.529 , 5293.01660156], [5150.093 , 5222.20947266], [5316.597 , 5038.15039062], [4504.642 , 4870.92626953], [4010.845 , 4471.08691406], [4747.499 , 4889.01367188], [4459.233 , 4890.43359375], [4524.651 , 4535.21826172], [4422.776 , 4522.83789062], [4501.472 , 4387.95947266], [3866.53 , 4143.63720703], [4174.629 , 3853.24291992], [4776.602 , 4907.62158203], [4550.925 , 4885.75 ], [4680.472 , 4616.22314453], [5299.041 , 4680.36816406], [5033.619 , 5086.44140625], [3866.479 , 4496.73925781], [3850.345 , 3750.96459961], [4392.055 , 4362.30175781], [4503.069 , 4371.0078125 ], [4653.648 , 4504.41601562], [4547.497 , 4620.46826172], [4375.674 , 4451.42333984], [3869.026 , 4148.76953125], [3907.826 , 3902.85913086], [4636.692 , 4516.39697266], [5392.16 , 4692.14697266], [4549.66 , 5342.87841797], [4545.018 , 4472.35644531], [4481.372 , 4438.40039062], [4029.452 , 4099.59667969], [4210.945 , 3985.74462891], [4795.244 , 4937.15966797], [4636.431 , 5115.57275391], [4778.72 , 4729.71679688], [5062.793 , 4905.54443359], [5261.797 , 4997.12548828], [5178.726 , 4884.12451172], [4269.442 , 5145.75390625], [4115.217 , 4811.21679688], [5891.802 , 4746.89746094], [5472.18 , 5860.94091797], [4891.123 , 5450.08935547], [5825.42 , 4820.70166016], [5175.903 , 5312.10693359], [3878.942 , 4985.5234375 ], [4517.535 , 4545.59130859], [4547.656 , 4731.57128906], [4452.242 , 4718.01708984], [4732.511 , 4621.828125 ], [5129.654 , 4786.24853516], [4746.539 , 4829.76611328], [3952.623 , 4774.79296875], [4589.468 , 4535.33544922], [4755.527 , 4684.26660156], [5102.274 , 4862.75390625], [5170.024 , 5060.04931641], [4868.169 , 5020.4375 ], [4832.88 , 4543.06738281], [5449.52 , 4868.94824219], [6672.182 , 6053.87451172], [5920.652 , 6549.765625 ], [5501.788 , 5792.02783203], [5678.169 , 5367.22949219], [4960.347 , 5394.73730469], [4145.88 , 4570.20068359], [5116.401 , 4241.96728516], [5283.722 , 5785.41699219], [5295.643 , 5479.77685547], [4943.626 , 5480.12402344], [5882.08 , 5006.39355469], [6145.304 , 5717.54638672], [6126.392 , 5620.23046875], [6463.527 , 5966.35693359], [7128.566 , 6989.21484375], [6952.539 , 7076.265625 ], [6116.405 , 6898.359375 ], [6532.576 , 6337.87353516], [5795.135 , 6361.109375 ], [4576.518 , 5372.80664062], [4980.261 , 4667.55810547], [5970.956 , 5788.66455078], [6512.682 , 6149.66748047], [6076.987 , 6506.81494141], [5918.072 , 5979.29345703], [5927.698 , 5720.12792969], [5854.278 , 5554.41455078], [5564.251 , 5780.08251953], [6927.349 , 6055.09130859], [6168.69 , 6918.58496094], [5768.708 , 6034.02294922], [5670.978 , 5700.99267578], [5685.491 , 5493.48535156], [4431.146 , 5365.77539062], [4786.909 , 4477.47119141], [5906.297 , 5300.05810547], [5651.195 , 5777.83691406], [5641.406 , 5511.65087891], [6128.032 , 5495.37011719], [6096.927 , 5909.90722656], [5382.136 , 5525.08984375], [5160.928 , 5312.70263672], [5180.443 , 5982.671875 ], [5353.01 , 5447.29833984], [6098.227 , 5498.68457031], [5672.849 , 5955.87548828], [5696.567 , 5422.77880859], [5723.522 , 5107.17529297], [6122.761 , 5477.05566406], [6768.753 , 6788.43164062], [6796.349 , 6908.85351562], [6584.522 , 6837.65820312], [6461.483 , 6514.11230469], [5998.118 , 6205.35351562], [5364.157 , 5504.96289062], [5450.86 , 5207.87841797], [5560.565 , 6043.27734375], [5528.046 , 5562.35449219], [6427.187 , 5592.28710938], [6568.84 , 6443.40087891], [6597.728 , 6411.49462891], [5578.582 , 6130.42919922], [4544.447 , 5424.8046875 ], [5374.504 , 5155.06933594], [5285.232 , 5512.89013672], [5792.804 , 5302.45556641], [5236.749 , 5783.60009766], [5381.727 , 5175.43554688], [4774.563 , 5181.10595703], [5236.045 , 4959.25244141], [6608.995 , 5940.05322266], [7019.585 , 6644.86669922], [7122.525 , 6972.39599609], [6616.401 , 6908.61572266], [5342.852 , 6258.73046875], [4588.158 , 4844.33154297], [5396.126 , 4529.11914062], [6276.221 , 5949.41357422], [6770.461 , 6829.75439453], [7010.759 , 6836.25439453], [7011.199 , 7112.18896484], [5740.82 , 6797.51416016], [4229.437 , 5239.79980469], [4001.774 , 4068.7487793 ], [4563.499 , 4382.84179688], [4748.356 , 4502.66015625], [5060.712 , 4841.79443359], [5401.334 , 5174.82910156], [5191.528 , 5449.43017578], [4892.908 , 4838.125 ], [5224.533 , 4760.17822266], [5225.673 , 5789.37207031], [5729.894 , 5156.12548828], [5668.352 , 5692.36328125], [5129.275 , 5624.03662109], [4815.649 , 4998.07470703], [4155.097 , 4468.47314453], [4076.157 , 4177.10839844], [4552.714 , 4866.08154297], [4670.063 , 4687.82861328], [5279.165 , 4632.56542969], [4590.715 , 5260.98242188], [4421.339 , 4495.82373047], [4013.778 , 4077.28881836], [4151.838 , 4069.0234375 ], [4916.593 , 4882.3671875 ], [5051.561 , 5011.41113281], [4922.051 , 5027.85791016], [5084.522 , 4876.70019531], [4511.032 , 4820.04003906], [4166.875 , 4079.44213867], [4858.851 , 4108.8671875 ], [5106.849 , 5394.54541016], [5302.099 , 5502.54101562], [5487.251 , 5365.71240234], [5189.259 , 5531.91894531], [4320.109 , 4944.41601562], [3991.759 , 3869.88964844], [4220.87 , 3966.81542969], [4644.173 , 4898.09130859], [4666.834 , 4685.02148438], [4808.789 , 4879.52050781], [4887.449 , 4864.82958984], [5053.667 , 4865.38623047], [3974.131 , 4619.02587891], [4379.087 , 3917.02490234], [4860.816 , 4954.35253906], [4643.555 , 4886.56494141], [4884.63 , 4700.00537109], [5110.007 , 4896.53271484], [5125.569 , 4934.49804688], [4575.906 , 4687.66113281], [4398.245 , 4449.91015625], [4790.109 , 4979.10742188], [5011.577 , 4955.29785156], [4935.709 , 5169.32275391], [4523.132 , 4914.15380859], [4466.411 , 4479.48486328], [4149.985 , 4036.10791016], [4276.33 , 4024.75024414], [4974.05 , 4810.62158203], [4789.979 , 4801.80126953], [4765.555 , 4779.8671875 ], [4846.681 , 4839.79492188], [5118.019 , 4706.01953125], [4933.351 , 4671.62158203], [4793.061 , 4843.94189453], [5418.177 , 5345.89892578], [5376.581 , 5574.46240234], [5539.761 , 5388.83789062], [6017.983 , 5701.43261719], [5480.964 , 5839.34960938], [4904.912 , 5175.921875 ], [4985.085 , 4878.47509766], [5287.808 , 5530.33056641], [5369.691 , 5324.81738281], [5492.574 , 5540.51318359], [5429.69 , 5654.83642578], [5627.499 , 5457.89794922], [5168.939 , 5312.39746094], [4583.331 , 5088.03466797], [5233.676 , 5149.38183594], [5794.361 , 5272.02294922], [5928.772 , 5984.65136719], [5689.822 , 6131.06542969], [5467.964 , 5605.13037109], [5085.452 , 5042.41601562], [4773.677 , 4958.33691406], [5286.201 , 5276.32910156], [5808.786 , 5447.84716797], [6202.791 , 5953.12011719], [6021.145 , 6149.23486328], [5869.309 , 5894.50341797], [5607.671 , 5452.87939453], [5763.169 , 5376.84082031], [6242.844 , 6196.90869141], [6373.356 , 6168.85009766], [5866.359 , 6280.93798828], [5760.94 , 5873.25537109], [5594.837 , 5714.16601562], [4858.278 , 5289.45654297], [5298.786 , 4902.33740234], [5716.25 , 5890.359375 ], [5919.401 , 6014.31689453], [6272.591 , 6284.48144531], [6014.691 , 6195.69042969], [4892.854 , 5775.06201172], [5104.628 , 4511.38330078], [4875.8 , 4937.11376953], [4937.264 , 5434.76513672], [4704.005 , 5171.09423828], [5443.333 , 5081.11523438], [5473.208 , 5536.36523438], [5085.966 , 5528.76611328], [4864.62 , 4681.9296875 ], [4948.338 , 4730.31494141], [5217.259 , 5364.66943359], [4569.365 , 5221.43945312]]) . . # Add the date column data_filtered_sub = data_filtered.copy() data_filtered_sub[&#39;Date&#39;] = date_index # Add the difference between the valid and predicted prices train = data_filtered_sub[:train_data_len + 1] valid = data_filtered_sub[train_data_len:] valid.insert(1, &quot;Prediction&quot;, y_pred.ravel(), True) valid.insert(1, &quot;Difference&quot;, valid[&quot;Prediction&quot;] - valid[&quot;mw_max&quot;], True) # Visualize the data fig, ax1 = plt.subplots(figsize=(22, 10), sharex=True) xt = train[&#39;Date&#39;]; yt = train[[&quot;mw_max&quot;]] xv = valid[&#39;Date&#39;]; yv = valid[[&quot;mw_max&quot;, &quot;Prediction&quot;]] plt.title(&quot;Predictions vs Actual Values&quot;, fontsize=20) plt.plot(xt, yt, color=&quot;#039dfc&quot;, linewidth=2.0) plt.plot(xv, yv[&quot;Prediction&quot;], color=&quot;#E91D9E&quot;, linewidth=2.0) plt.plot(xv, yv[&quot;mw_max&quot;], color=&quot;black&quot;, linewidth=2.0) plt.legend([&quot;Train&quot;, &quot;Test Predictions&quot;, &quot;Actual Values&quot;], loc=&quot;upper left&quot;) #plt.bar(x, y, width=0.8) plt.grid() plt.show() .",
            "url": "https://bspanswick.github.io/fastpages/2021/09/08/LSTM_STLF.html",
            "relUrl": "/2021/09/08/LSTM_STLF.html",
            "date": " • Sep 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bspanswick.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bspanswick.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bspanswick.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bspanswick.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}